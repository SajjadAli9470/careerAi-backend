import { SynthesizeStream, TTS } from './tts.js';
export class StreamAdapter extends TTS {
    #tts;
    #sentenceTokenizer;
    constructor(tts, sentenceTokenizer) {
        super(tts.sampleRate, tts.numChannels, { streaming: true });
        this.#tts = tts;
        this.#sentenceTokenizer = sentenceTokenizer;
    }
    synthesize(text) {
        return this.#tts.synthesize(text);
    }
    stream() {
        return new StreamAdapterWrapper(this.#tts, this.#sentenceTokenizer);
    }
}
export class StreamAdapterWrapper extends SynthesizeStream {
    #tts;
    #sentenceStream;
    constructor(tts, sentenceTokenizer) {
        super();
        this.#tts = tts;
        this.#sentenceStream = sentenceTokenizer.stream();
        this.#run();
    }
    async #run() {
        const forwardInput = async () => {
            for await (const input of this.input) {
                if (input === SynthesizeStream.FLUSH_SENTINEL) {
                    this.#sentenceStream.flush();
                }
                else {
                    this.#sentenceStream.pushText(input);
                }
            }
            this.#sentenceStream.endInput();
            this.#sentenceStream.close();
        };
        const synthesize = async () => {
            for await (const ev of this.#sentenceStream) {
                for await (const audio of this.#tts.synthesize(ev.token)) {
                    this.queue.put(audio);
                }
            }
            this.queue.put(SynthesizeStream.END_OF_STREAM);
        };
        Promise.all([forwardInput(), synthesize()]);
    }
}
//# sourceMappingURL=stream_adapter.js.map